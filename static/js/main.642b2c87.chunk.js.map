{"version":3,"sources":["components/Input.jsx","APIs/fetchToken.js","styles/divLogin.js","pages/Login.jsx","styles/gameHeader.js","components/GameHeader.jsx","APIs/fetchQuestions.js","redux/actions/index.js","redux/actions/actionTypes.js","components/Questions.jsx","styles/divGame.js","styles/mainGame.js","pages/Game.jsx","components/ButtonToLogin.jsx","pages/Feedback.jsx","serviceWorker.js","redux/reducers/loginReducer.js","redux/reducers/questionsReducer.js","redux/reducers/index.js","redux/store/store.js","index.js","App.js"],"names":["Input","this","props","value","id","onChange","dataTestId","text","htmlFor","type","name","data-testid","Component","fetchToken","a","async","fetch","response","json","data","ContainerLogin","styled","main","Login","state","email","handleChange","bind","validation","saveToken","handleClick","handleClickConfig","test","length","localStorage","setItem","token","e","preventDefault","history","push","JSON","stringify","player","assertions","score","gravatarEmail","target","setState","className","disabled","onClick","ContainerHeader","header","HeaderGame","url","getPlayerFromLocalStorage","fetchAvatar","playerString","getItem","parse","avatar","md5","toString","fetchA","alt","src","fetchQuestions","questionRequestError","payload","Questions","idQuestion","isAnswered","time","result","shouldRedirect","findQuestion","renderQuestion","updateTime","pointsCal","setLocalPlayer","nextQuestion","setInterval","jogador","getQuestions","tokenApi","playerX","correct","difficulty","questions","results","Number","console","log","prevState","resultado","styleWrong","border","category","question","correctAnswer","correct_answer","incorrectAnswer","incorrect_answers","fixedQuestion","replace","style","map","answer","index","key","to","display","connect","loginReducer","questionsReducer","dispatch","ContainerGame","div","MainGame","Game","ButtonToLogin","Feedback","feedbackRender","Boolean","window","location","hostname","match","INITIAL_STATE","action","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.642b2c87.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { string, func } from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { value, id, onChange, dataTestId, text } = this.props;\n    return (\n      <label htmlFor={ id }>\n        { text }\n        <input\n          type=\"text\"\n          value={ value }\n          id={ id }\n          name={ id }\n          onChange={ onChange }\n          data-testid={ `input-${dataTestId}` }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  value: string.isRequired,\n  id: string.isRequired,\n  onChange: func.isRequired,\n  dataTestId: string.isRequired,\n  text: string.isRequired,\n};\n\nexport default Input;\n","const url = 'https://opentdb.com/api_token.php?command=request';\n\nconst fetchToken = async () => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nexport default fetchToken;\n","import styled from 'styled-components';\n\nconst ContainerLogin = styled.main`\n  background-color: rgba(16, 158, 16, 0.8);\n  border: black 1px solid;\n  display: flex;\n  flex-direction: column;\n  height: 50%;\n  justify-content: center;\n  text-align: center;\n  margin: auto;\n  width: 400px;\n`;\n\nexport default ContainerLogin;\n","import React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport { func, number, string, objectOf, oneOfType, object } from 'prop-types';\nimport Input from '../components/Input';\nimport fetchToken from '../APIs/fetchToken';\nimport ContainerLogin from '../styles/divLogin';\nimport '../styles/login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      name: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.validation = this.validation.bind(this);\n    this.saveToken = this.saveToken.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickConfig = this.handleClickConfig.bind(this);\n  }\n\n  componentDidMount() {\n    this.saveToken();\n  }\n\n  validation() {\n    const { email, name } = this.state;\n    const emailVerify = /\\S+@\\S+\\.\\S+/;\n    const nameFormat = 2;\n    if (emailVerify.test(email) && name.length >= nameFormat) {\n      return false;\n    }\n    return true;\n  }\n\n  async saveToken() {\n    const data = await fetchToken();\n    localStorage.setItem('token', data.token);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    const { history } = this.props;\n    history.push('/trivia/game');\n    const { name, email } = this.state;\n    localStorage.setItem(\n      'state',\n      JSON.stringify({\n        player: { name, assertions: 0, score: 0, gravatarEmail: email },\n      }),\n    );\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { email, name } = this.state;\n    return (\n      <div className=\"divLogin\">\n        <ContainerLogin>\n          <h1 className=\"fs-2 font-monospace text-decoration-underline\">TRIVIA GAME</h1>\n          <Input\n            text=\"Nome: \"\n            value={ name }\n            onChange={ this.handleChange }\n            dataTestId=\"player-name\"\n            id=\"name\"\n          />\n          <Input\n            text=\"Email: \"\n            value={ email }\n            onChange={ this.handleChange }\n            dataTestId=\"gravatar-email\"\n            id=\"email\"\n          />\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            disabled={ this.validation() }\n            onClick={ this.handleClick }\n          >\n            Jogar\n          </button>\n        </ContainerLogin>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: objectOf(oneOfType([func, string, number, object])).isRequired,\n};\n\nexport default Login;\n","import styled from 'styled-components';\n\nconst ContainerHeader = styled.header`\n  align-items: center;\n  background-color: rgba(16, 158, 16, 0.8);\n  border: black 1px solid;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  text-align: center;\n  margin: auto;\n`;\n\nexport default ContainerHeader;\n","import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport ContainerHeader from '../styles/gameHeader';\n\nexport default class HeaderGame extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      url: '',\n    };\n\n    this.getPlayerFromLocalStorage = this.getPlayerFromLocalStorage.bind(this);\n    this.fetchAvatar = this.fetchAvatar.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPlayerFromLocalStorage();\n  }\n\n  getPlayerFromLocalStorage() {\n    const playerString = localStorage.getItem('state');\n    const { name, gravatarEmail, score } = JSON.parse(playerString).player;\n    this.fetchAvatar(gravatarEmail);\n    return {\n      name,\n      score,\n    };\n  }\n\n  async fetchAvatar(email) {\n    const avatar = md5(email).toString();\n    const fetchA = await fetch(`https://www.gravatar.com/avatar/${avatar}`);\n    const url = await fetchA.url;\n    this.setState({ url });\n  }\n\n  render() {\n    const { url } = this.state;\n    const { name, score } = this.getPlayerFromLocalStorage();\n    return (\n      <ContainerHeader>\n        <img\n          data-testid=\"header-profile-picture\"\n          alt=\"profilePhoto\"\n          src={ url }\n        />\n        <h3 data-testid=\"header-player-name\">{ name }</h3>\n        <h4 data-testid=\"header-score\">{ score }</h4>\n      </ContainerHeader>\n    );\n  }\n}\n","const fetchQuestions = async (token) => {\n  const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const data = await response.json();\n  return data;\n};\n\nexport default fetchQuestions;\n","import * as types from './actionTypes';\nimport fetchToken from '../../APIs/fetchToken';\nimport fetchQuestions from '../../APIs/fetchQuestions';\n\n// Action creators - login actions\n\nexport const tokenRequest = () => ({\n  type: types.TOKEN_REQUEST,\n});\n\nexport const tokenRequestSuccess = (payload) => ({\n  type: types.TOKEN_REQUEST_SUCCESS,\n  payload,\n});\n\nexport const tokenRequestError = (payload) => ({\n  type: types.TOKEN_REQUEST_ERROR,\n  payload,\n});\n\nexport const questionRequest = () => ({\n  type: types.QUESTIONS_REQUEST,\n});\n\nexport const questionRequestSuccess = (payload) => ({\n  type: types.QUESTIONS_REQUEST_SUCCESS,\n  payload,\n});\n\nexport const questionRequestError = (payload) => ({\n  type: types.QUESTIONS_REQUEST_ERROR,\n  payload,\n});\n\n// Fetch API\n\nexport const fetchAPIToken = async (dispatch) => {\n  dispatch(tokenRequest());\n  try {\n    const data = await fetchToken();\n    return dispatch(tokenRequestSuccess(data));\n  } catch (error) {\n    return dispatch(tokenRequestError(error));\n  }\n};\n\nexport const fetchAPIQuestion = (token) => async (dispatch) => {\n  dispatch(questionRequest());\n  try {\n    const data = await fetchQuestions(token);\n    return dispatch(questionRequestSuccess(data));\n  } catch (error) {\n    return dispatch(questionRequestError(error));\n  }\n};\n","export const TOKEN_REQUEST = 'TOKEN_REQUEST';\nexport const TOKEN_REQUEST_SUCCESS = 'TOKEN_REQUEST_SUCCESS';\nexport const TOKEN_REQUEST_ERROR = 'TOKEN_REQUEST_ERROR';\nexport const QUESTIONS_REQUEST = 'QUESTIONS_REQUEST';\nexport const QUESTIONS_REQUEST_SUCCESS = 'QUESTIONS_REQUEST_SUCCESS';\nexport const QUESTIONS_REQUEST_ERROR = 'QUESTIONS_REQUEST_ERROR';\n// export const FIND_QUESTION = 'FIND_QUESTION';\nexport const LOGIN = 'LOGIN';\n","/* eslint-disable */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { fetchAPIQuestion } from '../redux/actions';\n\nclass Questions extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      idQuestion: 0,\n      isAnswered: false,\n      time: 30,\n      result: 0,\n      shouldRedirect: false,\n      player: {\n        name: '',\n        assertions: 0,\n        score: 0,\n        gravatarEmail: '',\n      },\n    };\n\n    this.findQuestion = this.findQuestion.bind(this);\n    this.renderQuestion = this.renderQuestion.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n    this.pointsCal = this.pointsCal.bind(this);\n    this.setLocalPlayer = this.setLocalPlayer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const thousand = 1000;\n    this.findQuestion();\n    setInterval(() => this.updateTime(), thousand);\n    // this.setLocalPlayer();\n  }\n\n  setLocalPlayer() {\n    const { player: jogador } = this.state;\n    localStorage.setItem('state', JSON.stringify({ player: jogador }));\n  }\n\n  async findQuestion() {\n    const { getQuestions } = this.props;\n    const tokenApi = localStorage.getItem('token');\n    const response = await getQuestions(tokenApi);\n    const playerX = localStorage.getItem('state');\n    const { name, gravatarEmail } = JSON.parse(playerX).player;\n    this.setState({\n      player: {\n        assertions: 0,\n        score: 0,\n        name,\n        gravatarEmail },\n    });\n    return response;\n  }\n\n  pointsCal(correct) {\n    const { time, idQuestion } = this.state;\n    const { questions: { results } } = this.props;\n    const { difficulty } = results[idQuestion];\n    const ten = 10;\n    let result = 0;\n    if (correct === 'true') {\n      switch (difficulty) {\n      case 'easy':\n        result = ten + (time * 1);\n        break;\n      case 'medium':\n        result = ten + (time * 2);\n        break;\n      case 'hard':\n        result = ten + (time * Number('3'));\n        break;\n      default:\n        console.log('erro no switch');\n      }\n      this.setState((prevState) => ({\n        player: {\n          ...prevState.player,\n          assertions: prevState.player.assertions + 1,\n        },\n      }));\n    }\n    return result;\n  }\n\n  nextQuestion() {\n    const four = 4;\n    const { idQuestion } = this.state;\n    if (idQuestion === four) {\n      this.setState({\n        shouldRedirect: true,\n      });\n    }\n    this.setState((prevState) => ({\n      idQuestion: prevState.idQuestion + 1,\n      isAnswered: false,\n      time: 30,\n    }));\n  }\n\n  handleClick(correct) {\n    const resultado = this.pointsCal(correct);\n    this.setState((prevState) => ({\n      isAnswered: true,\n      time: 0,\n      result: prevState.result + resultado,\n      player: {\n        ...prevState.player,\n        score: prevState.result + resultado,\n        assertions: prevState.player.assertions,\n      },\n    }), () => {\n      this.setLocalPlayer();\n    });\n  }\n\n  updateTime() {\n    const { time } = this.state;\n    if (time > 0) {\n      this.setState((state) => ({\n        time: state.time - 1,\n      }));\n    } else {\n      this.setState({\n        isAnswered: true,\n      });\n    }\n  }\n\n  renderQuestion() {\n    const { idQuestion, isAnswered } = this.state;\n    const { questions: { results } } = this.props;\n    const styleWrong = { border: '3px solid rgb(255, 0, 0)' };\n    const styleCorrect = { border: '3px solid rgb(6, 240, 15)' };\n    const { category, question, correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswer,\n      type } = results[idQuestion];\n    const fixedQuestion = question\n      .replace(/&quot;/gi, '')\n      .replace(/&#039;/gi, '')\n      .replace(/&eacute/gi, '')\n      .replace(/&amp/gi, '');\n    return (\n      <div>\n        <h4 className=\"text-decoration-underline\">{ category }</h4>\n        <h3 data-testid=\"question-text\">{ fixedQuestion }</h3>\n        {\n          type === 'boolean'\n            ? (\n              <button\n                data-testid=\"wrong-answer-0\"\n                type=\"button\"\n                disabled={ isAnswered }\n                style={ isAnswered ? styleWrong : null }\n                onClick={ this.handleClick }\n              >\n                { incorrectAnswer }\n              </button>)\n            : incorrectAnswer.map((answer, index) => (\n              <button\n                data-testid={ `wrong-answer-${index}` }\n                key={ index }\n                type=\"button\"\n                value={ answer }\n                disabled={ isAnswered }\n                style={ isAnswered ? styleWrong : null }\n                onClick={ this.handleClick }\n              >\n                { answer }\n              </button>\n            ))\n        }\n        <button\n          data-testid=\"correct-answer\"\n          type=\"button\"\n          disabled={ isAnswered }\n          style={ isAnswered ? styleCorrect : null }\n          onClick={ () => this.handleClick('true') }\n        >\n          { correctAnswer }\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    const { isAnswered, time, shouldRedirect } = this.state;\n    const { questions } = this.props;\n    const { results } = questions;\n\n    if (shouldRedirect) return <Redirect to=\"/trivia/feedback\" />;\n    return (\n      <>\n        <div className=\"questions\">\n          {\n            results ? this.renderQuestion() : null\n          }\n        </div>\n        <div className=\"timer\">\n          {`Tempo: ${time}`}\n        </div>\n        <button\n          type=\"button\"\n          className=\"button-next\"\n          data-testid=\"btn-next\"\n          style={ !isAnswered ? { display: 'none' } : null }\n          onClick={ this.nextQuestion }\n        >\n          Pŕoxima\n        </button>\n      </>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  getQuestions: PropTypes.func.isRequired,\n  questions: PropTypes.shape({\n    results: PropTypes.shape({\n      category: PropTypes.string.isRequired,\n      question: PropTypes.string.isRequired,\n      correct_answer: PropTypes.string.isRequired,\n      incorrect_answers: PropTypes.objectOf(PropTypes.string),\n      type: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.loginReducer.email,\n  name: state.loginReducer.name,\n  questions: state.questionsReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (questions) => dispatch(fetchAPIQuestion(questions)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","import styled from 'styled-components';\n\nconst ContainerGame = styled.div`\n  display: flex;\n  background-color: black;\n  color: white;\n  flex-direction: column;\n  min-height: 600px;\n  justify-content: center;\n  text-align: center;\n  margin: auto;\n`;\n\nexport default ContainerGame;\n","import styled from 'styled-components';\n\nconst MainGame = styled.main`\n  min-height: 600px;\n  margin: auto;\n`;\n\nexport default MainGame;\n","import React, { Component } from 'react';\nimport GameHeader from '../components/GameHeader';\nimport Questions from '../components/Questions';\nimport ContainerGame from '../styles/divGame';\nimport MainGame from '../styles/mainGame';\n\nclass Game extends Component {\n  render() {\n    return (\n      <MainGame>\n        <GameHeader />\n        <ContainerGame>\n          <Questions />\n        </ContainerGame>\n      </MainGame>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport { string, func, number, object, objectOf, oneOfType } from 'prop-types';\n\nclass ButtonToLogin extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { history } = this.props;\n    history.push('/trivia');\n  }\n\n  render() {\n    const { dataTestId } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ this.handleClick }\n        data-testid={ dataTestId }\n      >\n        Jogar novamente\n      </button>\n    );\n  }\n}\n\nButtonToLogin.propTypes = {\n  history: objectOf(oneOfType([func, string, number, object])).isRequired,\n  dataTestId: string.isRequired,\n};\n\nexport default ButtonToLogin;\n","import React, { Component } from 'react';\nimport { string, func, number, object, objectOf, oneOfType } from 'prop-types';\nimport GameHeader from '../components/GameHeader';\nimport ButtonToLogin from '../components/ButtonToLogin';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      assertions: 0,\n      score: 0,\n      text: '',\n    };\n\n    this.getPlayerFromLocalStorage = this.getPlayerFromLocalStorage.bind(this);\n    this.feedbackRender = this.feedbackRender.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPlayerFromLocalStorage();\n  }\n\n  getPlayerFromLocalStorage() {\n    const playerString = localStorage.getItem('state');\n    const { assertions, score } = JSON.parse(playerString).player;\n    this.setState(({\n      score,\n      assertions,\n    }), () => this.feedbackRender());\n  }\n\n  feedbackRender() {\n    const three = 3;\n    const { assertions } = this.state;\n    console.log(assertions);\n    if (assertions < three) {\n      this.setState({ text: 'Podia ser melhor...' });\n    } else {\n      this.setState({ text: 'Mandou bem!' });\n    }\n  }\n\n  render() {\n    const { history } = this.props;\n    const { text, score, assertions } = this.state;\n    return (\n      <div>\n        <GameHeader />\n        <p data-testid=\"feedback-text\">chegou</p>\n\n        <div data-testid=\"feedback-text\">{ text }</div>\n        <div data-testid=\"feedback-total-score\">{ score }</div>\n        <div data-testid=\"feedback-total-question\">{ assertions }</div>\n\n        <ButtonToLogin history={ history } dataTestId=\"btn-play-again\" />\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  history: objectOf(oneOfType([func, string, number, object])).isRequired,\n};\n\nexport default Feedback;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n};\n\nconst loginReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.TOKEN_REQUEST:\n    return { ...state };\n  case types.TOKEN_REQUEST_SUCCESS:\n    return {\n      ...state, token: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default loginReducer;\n","import * as types from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  questions: [],\n};\n\nconst questionsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.QUESTIONS_REQUEST:\n    return { ...state };\n  case types.QUESTIONS_REQUEST_SUCCESS:\n    return { ...state, questions: action.payload };\n  case types.QUESTIONS_REQUEST_ERROR:\n    return { ...state, error: action.error };\n  default:\n    return { ...state };\n  }\n};\n\nexport default questionsReducer;\n","import { combineReducers } from 'redux';\nimport loginReducer from './loginReducer';\nimport questionsReducer from './questionsReducer';\n\nconst rootReducer = combineReducers({ loginReducer, questionsReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/trivia\" component={ Login } />\n        <Route path=\"/trivia/game\" component={ Game } />\n        <Route path=\"/trivia/feedback\" component={ Feedback } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}